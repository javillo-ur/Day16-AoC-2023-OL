new List<string[]>(){File.ReadAllLines("input.txt")}.Select(j => new System.Collections.Concurrent.ConcurrentDictionary<(int,int), int>(j.SelectMany((row, y) => row.Select((c, x) => (x, y, c))).ToDictionary(t => (t.x, t.y), t => t.c == '.' ? 0 : t.c == '/' ? 1 : t.c == '\\' ? 2 : t.c == '|' ? 3 : 4))).Select(j => new{dict = j, res = new System.Collections.Concurrent.ConcurrentDictionary<(int,int), bool[]>(j.Keys.ToDictionary(t => t, t => new bool[4]{false,false,false,false}))}).Select(j => new{j.res, k = Enumerable.Range(0, 4*j.dict.Keys.Count).Aggregate(new List<(int,int,int)>(){(-1, 0, 1)} as IEnumerable<(int,int,int)>, (previous, current) => !previous.Any() ? [] : previous.SelectMany(beam => beam.Item3 == 0 ? (j.dict.ContainsKey((beam.Item1, beam.Item2-1)) ? (j.dict[(beam.Item1, beam.Item2-1)] == 0 ? new List<(int,int,int)>(){(beam.Item1, beam.Item2-1, beam.Item3)} : j.dict[(beam.Item1, beam.Item2-1)] == 1 ? [(beam.Item1, beam.Item2-1, 1)] : j.dict[(beam.Item1, beam.Item2-1)] == 2 ? [(beam.Item1, beam.Item2-1, 3)] : j.dict[(beam.Item1, beam.Item2-1)] == 3 ? [(beam.Item1, beam.Item2-1, 0)] : [(beam.Item1, beam.Item2-1, 1), (beam.Item1, beam.Item2-1, 3)]) : []) : beam.Item3 == 1 ? (j.dict.ContainsKey((beam.Item1+1, beam.Item2)) ? (j.dict[(beam.Item1+1, beam.Item2)] == 0 ? new List<(int,int,int)>(){(beam.Item1+1, beam.Item2, beam.Item3)} : j.dict[(beam.Item1+1, beam.Item2)] == 1 ? [(beam.Item1+1, beam.Item2, 0)] : j.dict[(beam.Item1+1, beam.Item2)] == 2 ? [(beam.Item1+1, beam.Item2, 2)] : j.dict[(beam.Item1+1, beam.Item2)] == 3 ? [(beam.Item1+1, beam.Item2, 0), (beam.Item1+1, beam.Item2, 2)] : [(beam.Item1+1, beam.Item2, 1)]) : []) : beam.Item3 == 2 ? (j.dict.ContainsKey((beam.Item1, beam.Item2+1)) ? (j.dict[(beam.Item1, beam.Item2+1)] == 0 ? new List<(int,int,int)>(){(beam.Item1, beam.Item2+1, beam.Item3)} : j.dict[(beam.Item1, beam.Item2+1)] == 1 ? [(beam.Item1, beam.Item2+1, 3)] : j.dict[(beam.Item1, beam.Item2+1)] == 2 ? [(beam.Item1, beam.Item2+1, 1)] : j.dict[(beam.Item1, beam.Item2+1)] == 3 ? [(beam.Item1, beam.Item2+1, 2)] : [(beam.Item1, beam.Item2+1, 1), (beam.Item1, beam.Item2+1, 3)]) : []) : (j.dict.ContainsKey((beam.Item1-1, beam.Item2)) ? (j.dict[(beam.Item1-1, beam.Item2)] == 0 ? new List<(int,int,int)>(){(beam.Item1-1, beam.Item2, beam.Item3)} : j.dict[(beam.Item1-1, beam.Item2)] == 1 ? [(beam.Item1-1, beam.Item2, 2)] : j.dict[(beam.Item1-1, beam.Item2)] == 2 ? [(beam.Item1-1, beam.Item2, 0)] : j.dict[(beam.Item1-1, beam.Item2)] == 3 ? [(beam.Item1-1, beam.Item2, 0), (beam.Item1-1, beam.Item2, 2)] : [(beam.Item1-1, beam.Item2, 3)]) : [])).Where(newbeam => !j.res[(newbeam.Item1, newbeam.Item2)][newbeam.Item3]).Select(beam => new{beam, act = j.res.TryGetValue((beam.Item1, beam.Item2), out var value) && j.res.TryUpdate((beam.Item1, beam.Item2), [value[0] || beam.Item3 == 0, value[1] || beam.Item3 == 1, value[2] || beam.Item3 == 2, value[3] || beam.Item3 == 3], value)}).ToList().Select(j => j.beam))}).Select(j => j.res.Where(t => t.Value.Any(r => r)).Count()).ToList().ForEach(Console.WriteLine);